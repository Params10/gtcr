{
  "contractName": "PermissionInterface",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_value",
          "type": "bytes32"
        }
      ],
      "name": "isPermitted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.11+commit.c082d0b4\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"isPermitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"isPermitted(bytes32)\":{\"details\":\"Return true if the value is allowed.\",\"params\":{\"_value\":\"The value we want to check.\"},\"return\":\"allowed True if the value is allowed, false otherwise.\"}},\"title\":\"Permission Interface This is a permission interface for arbitrary values. The values can be cast to the required types.\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/home/betelgiuse/Documents/visus/kleros/repos/gtcr/contracts/interfaces/PermissionInterface.sol\":\"PermissionInterface\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/betelgiuse/Documents/visus/kleros/repos/gtcr/contracts/interfaces/PermissionInterface.sol\":{\"keccak256\":\"0x5f9f18f01660e5d5a9fe17207c0c9d25ccf78e9a65ef96032d740d1efeb5f52f\",\"urls\":[\"bzz-raw://01aa248228215b16a02d1384bd3fcaabba54dd21e657850a803778b257b77ac2\",\"dweb:/ipfs/QmTW6BD6ibP7cb2roznqGLKdrwjMa1FEEKHSh8C4JXdFcU\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "/**\n *  @authors: [@clesaege, @mtsalenc]\n *  @reviewers: [@clesaege*]\n *  @auditors: []\n *  @bounties: []\n *  @deployments: []\n */\n\npragma solidity ^0.5.11;\n\n/**\n *  @title Permission Interface\n *  This is a permission interface for arbitrary values. The values can be cast to the required types.\n */\ninterface PermissionInterface{\n    /* External */\n\n    /**\n     *  @dev Return true if the value is allowed.\n     *  @param _value The value we want to check.\n     *  @return allowed True if the value is allowed, false otherwise.\n     */\n    function isPermitted(bytes32 _value) external view returns (bool allowed);\n}",
  "sourcePath": "/home/betelgiuse/Documents/visus/kleros/repos/gtcr/contracts/interfaces/PermissionInterface.sol",
  "ast": {
    "absolutePath": "/home/betelgiuse/Documents/visus/kleros/repos/gtcr/contracts/interfaces/PermissionInterface.sol",
    "exportedSymbols": {
      "PermissionInterface": [
        2246
      ]
    },
    "id": 2247,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2238,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".11"
        ],
        "nodeType": "PragmaDirective",
        "src": "132:24:3"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": " @title Permission Interface\n This is a permission interface for arbitrary values. The values can be cast to the required types.",
        "fullyImplemented": false,
        "id": 2246,
        "linearizedBaseContracts": [
          2246
        ],
        "name": "PermissionInterface",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": " @dev Return true if the value is allowed.\n @param _value The value we want to check.\n @return allowed True if the value is allowed, false otherwise.",
            "id": 2245,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isPermitted",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2241,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2240,
                  "name": "_value",
                  "nodeType": "VariableDeclaration",
                  "scope": 2245,
                  "src": "564:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 2239,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "564:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "563:16:3"
            },
            "returnParameters": {
              "id": 2244,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2243,
                  "name": "allowed",
                  "nodeType": "VariableDeclaration",
                  "scope": 2245,
                  "src": "603:12:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2242,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "603:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "602:14:3"
            },
            "scope": 2246,
            "src": "543:74:3",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 2247,
        "src": "301:318:3"
      }
    ],
    "src": "132:487:3"
  },
  "legacyAST": {
    "absolutePath": "/home/betelgiuse/Documents/visus/kleros/repos/gtcr/contracts/interfaces/PermissionInterface.sol",
    "exportedSymbols": {
      "PermissionInterface": [
        2246
      ]
    },
    "id": 2247,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2238,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".11"
        ],
        "nodeType": "PragmaDirective",
        "src": "132:24:3"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": " @title Permission Interface\n This is a permission interface for arbitrary values. The values can be cast to the required types.",
        "fullyImplemented": false,
        "id": 2246,
        "linearizedBaseContracts": [
          2246
        ],
        "name": "PermissionInterface",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": " @dev Return true if the value is allowed.\n @param _value The value we want to check.\n @return allowed True if the value is allowed, false otherwise.",
            "id": 2245,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isPermitted",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2241,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2240,
                  "name": "_value",
                  "nodeType": "VariableDeclaration",
                  "scope": 2245,
                  "src": "564:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 2239,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "564:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "563:16:3"
            },
            "returnParameters": {
              "id": 2244,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2243,
                  "name": "allowed",
                  "nodeType": "VariableDeclaration",
                  "scope": 2245,
                  "src": "603:12:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2242,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "603:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "602:14:3"
            },
            "scope": 2246,
            "src": "543:74:3",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 2247,
        "src": "301:318:3"
      }
    ],
    "src": "132:487:3"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.11+commit.c082d0b4.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.11",
  "updatedAt": "2019-08-16T21:09:03.875Z",
  "devdoc": {
    "methods": {
      "isPermitted(bytes32)": {
        "details": "Return true if the value is allowed.",
        "params": {
          "_value": "The value we want to check."
        },
        "return": "allowed True if the value is allowed, false otherwise."
      }
    },
    "title": "Permission Interface This is a permission interface for arbitrary values. The values can be cast to the required types."
  },
  "userdoc": {
    "methods": {}
  }
}